<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://johncxsong.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://johncxsong.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-16T20:39:40+00:00</updated><id>https://johncxsong.github.io/feed.xml</id><title type="html">blank</title><subtitle>Welcome to John Song world! </subtitle><entry><title type="html">Data Shapley Implementation</title><link href="https://johncxsong.github.io/blog/2024/Data_shapley/" rel="alternate" type="text/html" title="Data Shapley Implementation"/><published>2024-12-23T08:01:00+00:00</published><updated>2024-12-23T08:01:00+00:00</updated><id>https://johncxsong.github.io/blog/2024/Data_shapley</id><content type="html" xml:base="https://johncxsong.github.io/blog/2024/Data_shapley/"><![CDATA[<h2 id="algorithms">Algorithms</h2> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/datashape1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h3 id="explanation">Explanation</h3> <h5 id="input-and-output">Input and Output</h5> <h6 id="input">Input:</h6> <ul> <li>\(D = \{1, \dots, n\}\): Dataset of \(n\) data points.</li> <li>\(A\): Learning algorithm (e.g., a model training routine).</li> <li>\(V\): Performance metric (e.g., accuracy, MSE, F1-score).</li> </ul> <h6 id="output">Output:</h6> <p>Estimated Shapley values \((\phi_1, \dots, \phi_n)\), representing the contribution of each data point to model performance.</p> <hr/> <h5 id="step-by-step">Step by Step</h5> <p>1.<strong>Initialization</strong></p> <ul> <li>Set \(\phi_i = 0\) for all data points ( i ).</li> <li>Initialize iteration counter ( t ).</li> </ul> <p>2.<strong>Main Loop (until convergence) Monte Carlo Iteration</strong>:</p> <ol> <li>\(t = t + 1\): Record the permutation number.</li> </ol> <p>2.1 <strong>Generate a random permutation of the data points</strong></p> <ul> <li>\(\pi\): Generate a random permutation of data points (uniform distribution).</li> </ul> <p>2.2 <strong>Performance on Empty Set</strong></p> <ul> <li>Compute \(v_0^t = V(\emptyset, A)\), the performance score with an empty dataset.</li> </ul> <p>2.3 <strong>Inner Loop</strong> (Iterate through all data points based on the permutation \(\pi\)):</p> <ul> <li>2.3.1 <strong>Truncation Condition Check</strong>: <ul> <li>If the difference between the performance of the full dataset and the current subset \(( \lvert V(D, A) - v_{j-1}^t \rvert )\) is less than the performance tolerance: <ul> <li>Set the last data point to the current data point.</li> </ul> </li> <li>Else → <strong>Marginal Contribution</strong>: <ul> <li>If not truncated, compute:<br/> \(v_j^t = V(S \cup \{\pi_t[j]\}, A)\) where \(S\) is the subset of points processed so far in \(\pi_t\).</li> <li>The marginal contribution is:<br/> \(v_j^t - v_{j-1}^t\)</li> </ul> </li> </ul> </li> <li>2.3.2 <strong>Update Data Shapley Value</strong>: <ul> <li>Use the computed marginal contribution to update the Shapley value for the data points.</li> <li> \[\phi_{\pi^{t}[j]} \leftarrow \frac{t - 1}{t} \phi_{\pi^{t-1}[j]} + \frac{1}{t} (v_j^t - v_{j-1}^t)\] </li> <li>\(\frac{t - 1}{t} \phi_{\pi^{t-1}[j]}\) <strong>is previous estimate</strong></li> <li>\(\frac{1}{t} (v_j^t - v_{j-1}^t)\) <strong>new marginal contribution</strong></li> <li>The formula approximates the Shapley value by averaging contributions across all sampled permutations. The weights \(\frac{t - 1}{t}\) and \(\frac{1}{t}\) ensure proper averaging.</li> </ul> </li> </ul> <p>2.4 <strong>End Inner Loop</strong></p> <p>2.5 <strong>If Convergence met, End Permutation</strong></p> <hr/> <h2 id="references">References</h2> <p><strong>Ghorbani, Amirata and Zou, James.</strong><br/> <em>Data Shapley: Equitable Valuation of Data for Machine Learning.</em><br/> International Conference on Machine Learning, 2019, pp. 2242–2251.</p>]]></content><author><name></name></author><category term="Computer_Science"/><category term="MachineLearning"/><category term="Coding"/><summary type="html"><![CDATA[Data Shapley Implementation through What is your Data worth? Equitable Valuation of Data]]></summary></entry><entry><title type="html">Monte Carlo Sampling</title><link href="https://johncxsong.github.io/blog/2024/Monte_carlo/" rel="alternate" type="text/html" title="Monte Carlo Sampling"/><published>2024-12-09T08:01:00+00:00</published><updated>2024-12-09T08:01:00+00:00</updated><id>https://johncxsong.github.io/blog/2024/Monte_carlo</id><content type="html" xml:base="https://johncxsong.github.io/blog/2024/Monte_carlo/"><![CDATA[<blockquote> <p>Shapley value optimization by applying Monte Carlo technique.</p> </blockquote> <h2 id="conclusion">Conclusion:</h2> <table> <thead> <tr> <th>Method</th> <th>Subset/Permutation Growth</th> <th>Big-O Complexity</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td><strong>Data Shapley</strong></td> <td>\(2^{n-1}\) subsets</td> <td>\(O(n \cdot 2^{n-1})\)</td> <td>Computes Shapley value by evaluating all subsets; exponential in (n).</td> </tr> <tr> <td><strong>Monte Carlo Sampling</strong></td> <td>\(P\) permutations</td> <td>\(O(n \cdot P)\)</td> <td>Approximates Shapley value by sampling linear in \(P\).</td> </tr> </tbody> </table> <hr/> <h2 id="1-data-shapley">1. Data Shapley</h2> \[\phi_i = \frac{1}{n!} \sum_{S \subseteq D \setminus \{i\}} \frac{V(S \cup \{i\}) - V(S)}{\binom{n-1}{|S|}}\] <p>From this equestion, elements will generate \(2^{n}\) subsets for each players.</p> <h3 id="walkthrough-example">Walkthrough Example</h3> <p>We are calculating the Shapley value for a dataset D = {a, b, c}, where the model’s performance metric V(S) for a subset S is given as follows:</p> <table> <thead> <tr> <th>Subset (S)</th> <th>V(S)</th> <th>\(V(S \cup \{a\})\)</th> <th>Marginal Contribution \(V(S \cup \{a\}) - V(S)\)</th> </tr> </thead> <tbody> <tr> <td>{}</td> <td>0.0</td> <td>0.2</td> <td>0.2</td> </tr> <tr> <td>{b}</td> <td>0.3</td> <td>0.4</td> <td>0.1</td> </tr> <tr> <td>{c}</td> <td>0.4</td> <td>0.5</td> <td>0.1</td> </tr> <tr> <td>{b, c}</td> <td>0.6</td> <td>0.7</td> <td>0.1</td> </tr> </tbody> </table> <hr/> <h4 id="step-1-marginal-contributions"><strong>Step 1: Marginal Contributions</strong></h4> <p>For each subset (S), the <strong>marginal contribution</strong> of data point \(a\) is calculated as:</p> \[\text{Marginal Contribution} = V(S \cup \{a\}) - V(S)\] <p>From the table:</p> <ul> <li>Subset {}: V({}) = 0.0, \(V(\{\} \cup \{a\}) = 0.2\), Contribution = (0.2 - 0.0 = 0.2).</li> <li>Subset {b}: V({b}) = 0.3, \(V(\{b\} \cup \{a\}) = 0.4\), Contribution = (0.4 - 0.3 = 0.1).</li> <li>Subset {c}: V({c}) = 0.4, \(V(\{c\} \cup \{a\}) = 0.5\), Contribution = (0.5 - 0.4 = 0.1).</li> <li>Subset {b, c}: V({b, c}) = 0.6, \(V(\{b, c\} \cup \{a\}) = 0.7\), Contribution = (0.7 - 0.6 = 0.1).</li> </ul> <hr/> <h4 id="step-2-weight-each-contribution"><strong>Step 2: Weight Each Contribution</strong></h4> <p>The weight is calculated as: \(\text{Weight for subset } S = \frac{1}{\binom{n-1}{|S|}}\)</p> <p>Where:</p> <ul> <li>\(n = 3\) (total number of elements in (D)),</li> <li>\(\binom{n-1}{S}\): Binomial coefficient representing the number of subsets of size (S) from \(n-1 = 2\) elements.</li> </ul> <table> <thead> <tr> <th>Subset Size \(S\)</th> <th>Subsets</th> <th>\(\binom{2}{S}\)</th> <th>Weight \(1 / \binom{2}{S}\)</th> </tr> </thead> <tbody> <tr> <td>0</td> <td>{}</td> <td>1</td> <td>1.0</td> </tr> <tr> <td>1</td> <td>{b}, {c}</td> <td>2</td> <td>0.5</td> </tr> <tr> <td>2</td> <td>{b, c}</td> <td>1</td> <td>1.0</td> </tr> </tbody> </table> <hr/> <h4 id="step-3-calculate-weighted-contributions"><strong>Step 3: Calculate Weighted Contributions</strong></h4> <p>For each subset, multiply the marginal contribution by its weight:</p> <table> <thead> <tr> <th>Subset \(S\)</th> <th>Marginal Contribution</th> <th>Weight \(1 / \binom{2}{S}\)</th> <th>Weighted Contribution</th> </tr> </thead> <tbody> <tr> <td>{}</td> <td>0.2</td> <td>1.0</td> <td>\(0.2 \times 1.0 = 0.2\)</td> </tr> <tr> <td>{b}</td> <td>0.1</td> <td>0.5</td> <td>\(0.1 \times 0.5 = 0.05\)</td> </tr> <tr> <td>{c}</td> <td>0.1</td> <td>0.5</td> <td>\(0.1 \times 0.5 = 0.05\)</td> </tr> <tr> <td>{b, c}</td> <td>0.1</td> <td>1.0</td> <td>\(0.1 \times 1.0 = 0.1\)</td> </tr> </tbody> </table> <hr/> <h4 id="step-4-sum-the-weighted-contributions"><strong>Step 4: Sum the Weighted Contributions</strong></h4> <p>The Shapley value for (a) is the sum of all weighted contributions:</p> \[\phi_a = 0.2 + 0.05 + 0.05 + 0.1 = 0.4\] <p>The Shapley value for data point (a) is: \(\phi_a = 0.4\)</p> <hr/> <h2 id="2-data-shapleymonte-carlo">2. Data Shapley–Monte Carlo</h2> <h3 id="walkthrough-example-1">Walkthrough Example</h3> <p>We are using the Monte Carlo method to approximate the Shapley value for a dataset (D = {a, b, c}). Instead of calculating the Shapley value using all \(2^{n-1}\) subsets, we randomly sample <strong>permutations of data points</strong> and compute the marginal contribution of each data point in each sampled permutation.</p> <h4 id="step-1-random-permutations"><strong>Step 1: Random Permutations</strong></h4> <p>For (n = 3), the total number of permutations is (3! = 6): [ [a, b, c], [a, c, b], [b, a, c], [b, c, a], [c, a, b], [c, b, a] ]</p> <p>In the Monte Carlo method, we randomly sample a fixed number \(P\) of these permutations. Suppose we sample (P = 2) permutations:</p> <ol> <li>([b, a, c])</li> <li>([a, c, b])</li> </ol> <h4 id="step-2-marginal-contribution-for-each-permutation"><strong>Step 2: Marginal Contribution for Each Permutation</strong></h4> <p>For each permutation, we compute the <strong>marginal contribution</strong> of each data point as it is added to the subset formed by preceding elements in the permutation.</p> <p><strong>Permutation 1: ([b, a, c])</strong></p> <ul> <li><strong>b</strong>: V({b}) - V({}) = 0.3 - 0.0 = 0.3</li> <li><strong>a</strong>: V({b, a}) - V({b}) = 0.4 - 0.3 = 0.1</li> <li><strong>c</strong>: V({b, a, c}) - V({b, a}) = 0.7 - 0.4 = 0.3</li> </ul> <p><strong>Permutation 2: ([a, c, b])</strong></p> <ul> <li><strong>a</strong>: V({a}) - V({}) = 0.2 - 0.0 = 0.2</li> <li><strong>c</strong>: V({a, c}) - V({a}) = 0.5 - 0.2 = 0.3</li> <li><strong>b</strong>: V({a, c, b}) - V({a, c}) = 0.7 - 0.5 = 0.2</li> </ul> <h4 id="step-3-average-marginal-contributions"><strong>Step 3: Average Marginal Contributions</strong></h4> <p>To compute the approximate Shapley value for each data point, average the marginal contributions across all sampled permutations.</p> <table> <thead> <tr> <th>Data Point</th> <th>Contribution in Permutation 1</th> <th>Contribution in Permutation 2</th> <th>Average Contribution</th> </tr> </thead> <tbody> <tr> <td>a</td> <td>0.1</td> <td>0.2</td> <td>(0.1 + 0.2)/2 = 0.15</td> </tr> <tr> <td>b</td> <td>0.3</td> <td>0.2</td> <td>(0.3 + 0.2)/2 = 0.25</td> </tr> <tr> <td>c</td> <td>0.3</td> <td>0.3</td> <td>(0.3 + 0.3)/2 = 0.3</td> </tr> </tbody> </table> <p>The Monte Carlo approximation gives the following Shapley values: \(\phi_a \approx 0.15, \quad \phi_b \approx 0.25, \quad \phi_c \approx 0.3\)</p> <hr/> <h2 id="references">References:</h2> <ul> <li>What is your data worth? Equitable Valuation of Data</li> <li><a href="https://en.wikipedia.org/wiki/Monte_Carlo_method">https://en.wikipedia.org/wiki/Monte_Carlo_method</a></li> <li><a href="https://www.ibm.com/topics/monte-carlo-simulation">https://www.ibm.com/topics/monte-carlo-simulation</a></li> <li>ChatGPT</li> </ul>]]></content><author><name></name></author><category term="Computer_Science"/><category term="MachineLearning"/><category term="Coding"/><summary type="html"><![CDATA[Monte Carlo Sampling technique for algorithm optimization]]></summary></entry><entry><title type="html">CUDA 8.0 Setup</title><link href="https://johncxsong.github.io/blog/2024/CUDA8/" rel="alternate" type="text/html" title="CUDA 8.0 Setup"/><published>2024-09-10T21:01:00+00:00</published><updated>2024-09-10T21:01:00+00:00</updated><id>https://johncxsong.github.io/blog/2024/CUDA8</id><content type="html" xml:base="https://johncxsong.github.io/blog/2024/CUDA8/"><![CDATA[<blockquote> <p><strong>TensorFlow 1.15</strong> works with <strong>CUDA 10.0</strong> and <strong>cuDNN 7.4</strong> <br/> <strong>TensorFlow 1.4</strong> works with <strong>CUDA 8.0</strong> and <strong>cuDNN 6</strong>.</p> </blockquote> <p><code class="language-plaintext highlighter-rouge">If you have tensorflow 2.xx , Cuda &gt; 11.0 </code></p> <h1 id="windows-10-os">Windows 10 OS</h1> <h3 id="cuda-toolkits">CUDA Toolkits</h3> <p><strong>cuda 8.0 downloading</strong> <a href="https://developer.nvidia.com/cuda-80-ga2-download-archive">https://developer.nvidia.com/cuda-80-ga2-download-archive</a></p> <p><strong>Set environment</strong></p> <ul> <li>Go to Start and Search “environment variables”</li> <li>click the Environment Variables button</li> <li>Click on the Path system variable and select edit</li> <li>add the following paths <ul> <li>`C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\bin`</li> <li> `C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\libnvvp`</li> <li>`C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\extras\CUPTI\libx64`</li> </ul> </li> </ul> <p><strong>cudnn 6.0 downloading</strong> <a href="https://developer.nvidia.com/rdp/cudnn-archive">https://developer.nvidia.com/rdp/cudnn-archive</a></p> <ul> <li> <p>Looking for <a href="https://developer.nvidia.com/rdp/cudnn-archive#a-collapse6-8">Download cuDNN v6.0 (April 27, 2017), for CUDA 8.0</a></p> </li> <li> <p><strong>Extract the files</strong>: Once you’ve downloaded the cuDNN zip file, extract it.</p> </li> <li> <p><strong>Copy the files</strong>:</p> <ul> <li>Copy the contents of the extracted <code class="language-plaintext highlighter-rouge">cuda</code> folder to your <strong>CUDA installation</strong> directory. For example, if you have installed CUDA in the default directory (<code class="language-plaintext highlighter-rouge">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0</code>), copy the following: <ul> <li>Copy <code class="language-plaintext highlighter-rouge">bin/cudnn*.dll</code> to <code class="language-plaintext highlighter-rouge">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\bin</code>.</li> <li>Copy <code class="language-plaintext highlighter-rouge">include/cudnn*.h</code> to <code class="language-plaintext highlighter-rouge">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\include</code>.</li> <li>Copy <code class="language-plaintext highlighter-rouge">lib/x64/cudnn*.lib</code> to <code class="language-plaintext highlighter-rouge">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\lib\x64</code></li> </ul> </li> </ul> </li> </ul> <h1 id="ubuntu-1604">Ubuntu 16.04</h1> <blockquote> <p>Please note: Ubuntu 22.04 is not comptabile with CUDA 8.0</p> </blockquote> <p><strong>Reference</strong> <a href="https://gist.github.com/Mahedi-61/7b1f737e328fe19f4063f08a009c82c4">https://gist.github.com/Mahedi-61/7b1f737e328fe19f4063f08a009c82c4</a></p>]]></content><author><name></name></author><category term="Computer_Science"/><category term="MachineLearning"/><category term="Coding"/><summary type="html"><![CDATA[walk through setup for CUDA 8.0 and tensorflow 1.xx]]></summary></entry><entry><title type="html">Prov-Gigapath Setup Tutorial</title><link href="https://johncxsong.github.io/blog/2024/Provgigapath/" rel="alternate" type="text/html" title="Prov-Gigapath Setup Tutorial"/><published>2024-07-15T21:01:00+00:00</published><updated>2024-07-15T21:01:00+00:00</updated><id>https://johncxsong.github.io/blog/2024/Provgigapath</id><content type="html" xml:base="https://johncxsong.github.io/blog/2024/Provgigapath/"><![CDATA[<div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/whole_slide_beginning.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div>]]></content><author><name></name></author><category term="Computer_Science"/><category term="MachineLearning"/><category term="Coding"/><summary type="html"><![CDATA[walk through setup for pretrain model]]></summary></entry><entry><title type="html">JAVA JDK8-Comparsion method violates its general contract</title><link href="https://johncxsong.github.io/blog/2023/Comparsion_method/" rel="alternate" type="text/html" title="JAVA JDK8-Comparsion method violates its general contract"/><published>2023-01-16T21:01:00+00:00</published><updated>2023-01-16T21:01:00+00:00</updated><id>https://johncxsong.github.io/blog/2023/Comparsion_method</id><content type="html" xml:base="https://johncxsong.github.io/blog/2023/Comparsion_method/"><![CDATA[<h2 id="solution-1">Solution 1</h2> <ul> <li>Add this code into <code class="language-plaintext highlighter-rouge">main()</code></li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"java.util.Arrays.useLegacyMergeSort"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
</code></pre></div></div> <ul> <li>code as below.</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">// TODO Auto-generated method stub</span>
        <span class="c1">//system properties---------------------------------------------------</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"java.util.Arrays.useLegacyMergeSort"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="s">"K2_flu_12062022_20230111_try_correct1.xdsl"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"try"</span> <span class="o">+</span> <span class="n">fileName</span><span class="o">);</span>
        <span class="n">runOne</span><span class="o">(</span><span class="n">fileName</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"finish!"</span><span class="o">);</span>

</code></pre></div></div> <p>This will use the old merge sort algorithm instead of TimSort. By using this algorithm, it could bypass the EXCEPTION.</p> <h2 id="solution-2">Solution 2</h2> <ul> <li>SepSetComparator need to be modified.</li> <li>Comparator must be transitive without a contradiction.</li> <li>Compare( ) should follow this rule (https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html)</li> <li>add this code to compare()</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o1</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SepSet</span> <span class="n">sepSet1</span> <span class="o">=</span> <span class="o">(</span><span class="nc">SepSet</span><span class="o">)</span> <span class="n">o1</span><span class="o">;</span>
        <span class="nc">SepSet</span> <span class="n">sepSet2</span> <span class="o">=</span> <span class="o">(</span><span class="nc">SepSet</span><span class="o">)</span> <span class="n">o2</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">results1</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">results2</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
        <span class="n">results1</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="o">-</span><span class="n">sepSet1</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
        <span class="n">results1</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sepSet1</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">results1</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">results1</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">*</span> <span class="n">sepSet1</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">getStates</span><span class="o">().</span><span class="na">size</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">results2</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="o">-</span><span class="n">sepSet2</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
        <span class="n">results2</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sepSet2</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">results2</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">results2</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">*</span> <span class="n">sepSet2</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">getStates</span><span class="o">().</span><span class="na">size</span><span class="o">();</span>
        <span class="o">}</span>
<span class="c1">// Here is the modifying part.-----------------------------------------------</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">results1</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">results2</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">||</span> <span class="n">results1</span><span class="o">[</span><span class="mi">1</span><span class="o">]&lt;=</span><span class="n">results2</span><span class="o">[</span><span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">results1</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">results2</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">||</span> <span class="n">results1</span><span class="o">[</span><span class="mi">1</span><span class="o">]&gt;</span><span class="n">results2</span><span class="o">[</span><span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
<span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
<span class="c1">//-------------------------------------------------------------------------</span>
<span class="o">}</span>
</code></pre></div></div> <h2 id="explanation">Explanation</h2> <h4 id="solution-1-1">Solution 1</h4> <ul> <li>bypass the exception by using LegacyMergeSort instead of TimSort. [TimSort replaced LegacyMergeSort after JDK 7].</li> <li>When do use this solution? If you are sure that your Compare() method is correct, use this solution.</li> </ul> <h4 id="solution-2-1">Solution 2</h4> <ul> <li>usually when this exception occur, the comprare method may have not include all conditions.</li> <li>Since orignal code is</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// Here is the original part.-----------------------------------------------</span>
<span class="k">if</span> <span class="o">(</span><span class="n">results1</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">results2</span><span class="o">[</span><span class="mi">0</span><span class="o">])</span> <span class="o">{</span><span class="k">return</span> <span class="o">-</span><span class="mi">2</span><span class="o">;}</span>
<span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">results1</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">results2</span><span class="o">[</span><span class="mi">0</span><span class="o">])</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">results1</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">results2</span><span class="o">[</span><span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="k">return</span> <span class="mi">0</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>
<span class="k">else</span> <span class="o">{</span>
    <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div> <p>Since compare method only return three value: -1,0,1</p> <p>if you want <code class="language-plaintext highlighter-rouge">results1[1]&lt;=results2[1] return -1</code>. My suggestion is to write this situation together. Thus,</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">results1</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">results2</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">||</span> <span class="n">results1</span><span class="o">[</span><span class="mi">1</span><span class="o">]&lt;=</span><span class="n">results2</span><span class="o">[</span><span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <p>After add this, we still need to consider results1[1]&gt;results2[1] this situation. Thus,</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">results1</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">results2</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">||</span> <span class="n">results1</span><span class="o">[</span><span class="mi">1</span><span class="o">]&gt;</span><span class="n">results2</span><span class="o">[</span><span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
    <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <p>else return 1</p> <p>Finally, we include all three situation where comparing the list of reuslts1 and reuslts2. The main method should run without exception.</p> <h2 id="reference">Reference</h2> <p>java.util.TimSort<br/> Similar issue:</p> <ol> <li>https://bugs.java.com/bugdatabase/view_bug.do?bug_id=7193557</li> <li>https://bugs.java.com/bugdatabase/view_bug.do?bug_id=8234482</li> </ol> <p>Comparator:</p> <ol> <li>https://www.scaler.com/topics/java/comparable-and-comparator-in-java/</li> <li>https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html</li> </ol>]]></content><author><name></name></author><category term="Computer_Science"/><category term="Coding"/><summary type="html"><![CDATA[Comparsion method violates its general contract]]></summary></entry><entry><title type="html">婚姻书籍翻译</title><link href="https://johncxsong.github.io/blog/2023/marriage/" rel="alternate" type="text/html" title="婚姻书籍翻译"/><published>2023-01-01T17:39:00+00:00</published><updated>2023-01-01T17:39:00+00:00</updated><id>https://johncxsong.github.io/blog/2023/marriage</id><content type="html" xml:base="https://johncxsong.github.io/blog/2023/marriage/"><![CDATA[<p>Redirecting to another page.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Marry Wisely, Marry Well - A Blueprint for Personal Preparation]]></summary></entry></feed>